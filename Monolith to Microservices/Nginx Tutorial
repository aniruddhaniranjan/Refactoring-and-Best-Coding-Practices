One strategy to not use is the “Big Bang” rewrite. That is when you focus all of your development efforts on building a new microservices‑based application from scratch. Although it sounds appealing, it is extremely risky and will likely end in failure.

Strategy 1 – Stop Digging
In other words, you should stop making the monolith bigger. This means that when you are implementing new functionality you should not add more code to the monolith. Instead, the big idea with this strategy is to put that new code in a standalone microservice.

There is a request router, which handles incoming (HTTP) requests. It is similar to the API gateway. The router sends requests corresponding to new functionality to the new service and legacy requests to the monolith.

There is glue code which integrates service with monolith. It could reside in monolith, service or both and performs read/write of data, from monolith, which service needs. For accessing data the glue code can - a. Invoke remote API on the monolith, access DB directly or maintain its own copy of the data and sync with monolith DB. Glue code is sometimes called anti-corruption layer as it prevents service's new domain model from being corrupted by monolith's old domain model. It translates between the two models. Writing this is not trivial.

Benefits - a. Prevents the monolith from becoming even more unmanageable. b. The service can be developed, deployed, and scaled independently of the monolith
Drawback - Doesn't address issues within monolith

Strategy 2 - Split frontend and backend
Split the presentation layer from business-logic and data access layers. Presentation layer - components that handle HTTP requests and implement either HTML based UI or REST APIs. Business Logic - Components at core of application and implement business rules. Data access layer - Components that access infrastructure components such as databases and message brokers
Business tier has coarse-grained APIs consisting of one or more facades, which encapsulates business-logic into components. This is a natural place to split monolith into 2 apps - presentation and business-logic/data-access. After splitting, presentation logic makes remote calls to business-logic components.
Benefits - Develop, deploy and scale independently. In particular, it allows UI developers to iterate quickly and perform A/B testing. Another is it exposes new remote APIs in business logic which can be called by new microservices being developed.


Strategy 3 - Extract services
Each time you extract a module and turn it into a service, the monolith shrinks. Either it disappears entirely or it becomes small enough that it is just another service. Converting a module into a service is typically time consuming. You want to rank modules by the benefit you will receive. It is usually beneficial to extract modules that change frequently.
It is also beneficial to extract modules that have resource requirements significantly different from those of the rest of the monolith. It is useful, for example, to turn a module that has an in‑memory database into a service, which can then be deployed on hosts with large amounts of memory. Similarly, it can be worthwhile to extract modules that implement computationally expensive algorithms, since the service can then be deployed on hosts with lots of CPUs. By turning modules with particular resource requirements into services, you can make your application much easier to scale.
When figuring out which modules to extract, it is useful to look for existing coarse‑grained boundaries (a.k.a seams). They make it easier and cheaper to turn modules into services. An example of such a boundary is a module that only communicates with the rest of the application via asynchronous messages. It can be relatively cheap and easy to turn that module into a microservice.

How to Extract a Module
1. The first step of extracting a module is to define a coarse‑grained interface between the module and the monolith. It is mostly likely a bidirectional API, since the monolith will need data owned by the service and vice versa. It is often challenging to implement such an API because of the tangled dependencies and fine‑grained interaction patterns between the module and the rest of the application. Business logic implemented using the Domain Model pattern is especially challenging to refactor because of numerous associations between domain model classes. You will often need to make significant code changes to break these dependencies.
Once you implement the coarse‑grained interface, you then turn the module into a free‑standing service. To do that, you must write code to enable the monolith and the service to communicate through an API that uses an inter‑process communication (IPC) mechanism. Define a set of coarse-grained APIs - incoming to the service if a particular dependency is from monolith module to new service and outgoing if it's other way around.

2. The second refactoring step turns the module into a standalone service. The inbound and outbound interfaces are implemented by code that uses an IPC mechanism. You will most likely need to build the service by combining Module Z with a Microservice Chassis framework that handles cross‑cutting concerns such as service discovery.

In above case, we can even rewrite this new microservice from scratch. The coarse-grained APIs becomes the anti-corruption layer in between the monolith and service domain models.

Develop, deploy and scale independently; Increase velocity of incrementally adding new functionality to services and testing
